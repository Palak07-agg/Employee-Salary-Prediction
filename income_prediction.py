# -*- coding: utf-8 -*-
"""ibm_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qRijDCqq-tWh2HG3e4xeOzxE2LFg87tW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

data=pd.read_csv("/content/adult 3.csv")

data

data.occupation.replace({'?':'Others'}, inplace=True)

data.workclass.replace({'?':'Not Listed'}, inplace=True)

data

data['native-country'].replace({'?':'Not Listed'}, inplace=True)

data

print(data.occupation.value_counts())

print(data.age.value_counts())

print(data.fnlwgt.value_counts())

print(data.education.value_counts())

print(data.relationship.value_counts())

print(data.race.value_counts())

print(data['capital-gain'].value_counts())

data=data[data['workclass'] !='Without-pay']
data=data[data['workclass'] !='Never-worked']

data=data[data['education'] !='5th-6th']
data=data[data['education'] !='1st-4th']
data=data[data['education'] !='Preschool']

data=data[data['occupation'] !='Armed-Forces']
data=data[data['occupation'] !='Prev-house-serv']

print(data['native-country'].value_counts())

print(data['marital-status'].value_counts())

data=data[data['marital-status'] !='Married-AF-spouse']

data=data[data['native-country'] !='Holand-Netherlands']

data

#redundancy
data.drop(columns=['education'],inplace=True)

#outlier
import matplotlib.pyplot as plt
plt.boxplot(data['age'])
plt.show()

data=data[(data['age']<=75) & (data['age'] >=17)]

#outlier
import matplotlib.pyplot as plt
plt.boxplot(data['age'])
plt.show()

data

plt.boxplot(data['fnlwgt'])
plt.show()

plt.boxplot(data['hours-per-week'])
plt.show()

x=data.drop(columns=['income']) #input
y=data['income'] #output
x

y

#label encoding
from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['workclass']=encoder.fit_transform(data['workclass'])
data['gender']=encoder.fit_transform(data['gender'])
data['race']=encoder.fit_transform(data['race'])
data['native-country']=encoder.fit_transform(data['native-country'])
data['marital-status']=encoder.fit_transform(data['marital-status'])
data['relationship']=encoder.fit_transform(data['relationship'])
data['occupation']=encoder.fit_transform(data['occupation'])

data

X = data.drop("income", axis=1)
y = data["income"]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

x_train, x_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42)

print(data['income'].value_counts())

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

model.fit(x_train, y_train)
y_pred = model.predict(x_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Salary")
plt.ylabel("Predicted Salary")
plt.title("Actual vs Predicted Salary")
plt.show()

import joblib
joblib.dump(model, "salary_predictor_model.pkl")

from sklearn.metrics import accuracy_score

y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

cm = confusion_matrix(y_test, y_pred)

sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred, target_names=["<50", ">=50"]))

from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler, OneHotEncoder

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

models = {
    "LogisticRegression": LogisticRegression(),
    "RandomForest": RandomForestClassifier(),
    "KNN": KNeighborsClassifier(),
    "SVM": SVC(),
    "GradientBoosting": GradientBoostingClassifier()
}

results = {}

for name, model in models.items():
    pipe = Pipeline([
        ('scaler', StandardScaler()),
        ('model', model)
    ])

    pipe.fit(x_train, y_train)
    y_pred = pipe.predict(x_test)
    acc = accuracy_score(y_test, y_pred)
    results[name] = acc
    print(f"{name} Accuracy: {acc:.4f}")
    print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
plt.bar(results.keys(), results.values(), color='skyblue')
plt.ylabel('Accuracy Score')
plt.title('Model Comparison')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import joblib

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Define models
models = {
    "LogisticRegression": LogisticRegression(max_iter=1000),
    "RandomForest": RandomForestClassifier(),
    "KNN": KNeighborsClassifier(),
    "SVM": SVC(),
    "GradientBoosting": GradientBoostingClassifier()
}

results = {}

# Train and evaluate
for name, model in models.items():
    model.fit(x_train, y_train)
    preds = model.predict(x_test)
    acc = accuracy_score(y_test, preds)
    results[name] = acc
    print(f"{name}: {acc:.4f}")

# Get best model
best_model_name = max(results, key=results.get)
best_model = models[best_model_name]
print(f"\n‚úÖ Best model: {best_model_name} with accuracy {results[best_model_name]:.4f}")

# Save the best model
joblib.dump(best_model, "best_model.pkl")
print("‚úÖ Saved best model as best_model.pkl")

!pip install streamlit pyngrok --quiet

from pyngrok import ngrok

# Only needs to be run once per session
ngrok.set_auth_token("30Dc8LjPgQ7goL7OSfeYnKULwim_3iA8qA5ySvvWvczxfNEn")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # Load the trained model
# model = joblib.load("best_model.pkl")
# 
# st.set_page_config(page_title="Employee Salary Classification", page_icon="üíº", layout="centered")
# 
# st.title("üíº Employee Salary Prediction Site")
# st.markdown("This application predicts whether an employee earns >50K or ‚â§50K based on the different input features.")
# 
# # Sidebar inputs (these must match your training feature columns)
# st.sidebar.header("Enter Employee Details")
# 
# # ‚ú® Replace these fields with your dataset's actual input columns
# age = st.sidebar.slider("Age", 18, 65, 30)
# education = st.sidebar.selectbox("Education Level", [
#     "Bachelors", "Masters", "PhD", "HS-grad", "Assoc", "Some-college"
# ])
# occupation = st.sidebar.selectbox("Job Role", [
#     "Tech-support", "Craft-repair", "Other-service", "Sales",
#     "Exec-managerial", "Prof-specialty", "Handlers-cleaners", "Machine-op-inspct",
#     "Adm-clerical", "Farming-fishing", "Transport-moving", "Priv-house-serv",
#     "Protective-serv", "Armed-Forces"
# ])
# hours_per_week = st.sidebar.slider("Hours per week", 1, 80, 40)
# experience = st.sidebar.slider("Years of Experience", 0, 40, 5)
# 
# # Build input DataFrame (‚ö†Ô∏è must match preprocessing of your training data)
# input_df = pd.DataFrame({
#     'age': [age],
#     'education': [education],
#     'occupation': [occupation],
#     'hours-per-week': [hours_per_week],
#     'experience': [experience]
# })
# 
# st.write("### üîé Input Data")
# st.write(input_df)
# 
# # Predict button
# if st.button("Predict Salary Class"):
#     prediction = model.predict(input_df)
#     st.success(f"‚úÖ Prediction: {prediction[0]}")
# 
# # Batch prediction
# st.markdown("---")
# st.markdown("#### üìÇ Batch Prediction")
# uploaded_file = st.file_uploader("Upload a CSV file for batch prediction", type="csv")
# 
# if uploaded_file is not None:
#     batch_data = pd.read_csv(uploaded_file)
#     st.write("Uploaded data preview:", batch_data.head())
#     batch_preds = model.predict(batch_data)
#     batch_data['PredictedClass'] = batch_preds
#     st.write("‚úÖ Predictions:")
#     st.write(batch_data.head())
#     csv = batch_data.to_csv(index=False).encode('utf-8')
#     st.download_button("Download Predictions CSV", csv, file_name='predicted_classes.csv', mime='text/csv')
# 
#

import os
import threading
import time
from pyngrok import ngrok

# Start Streamlit app in background
def run():
    os.system("streamlit run app.py")

thread = threading.Thread(target=run)
thread.start()

time.sleep(5)  # Allow Streamlit to boot

# ‚úÖ FIXED LINE ‚Äî replace port=8501 with addr="8501"
public_url = ngrok.connect(addr="8501")
print("Your Streamlit app is live at:", public_url)